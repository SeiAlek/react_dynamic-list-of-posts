{"version":3,"sources":["helpers/getData.tsx","components/Button/Button.tsx","components/Comments/CommentItem.tsx","components/Comments/CommentList.tsx","components/PostList/PostItem.tsx","components/PostList/PostList.tsx","components/Search/Search.tsx","helpers/debounce.js","App.tsx","index.tsx"],"names":["API_URL","getData","url","a","fetch","response","json","preparePosts","Promise","all","posts","users","comments","map","post","user","find","id","userId","filter","comment","postId","Button","text","className","handleClick","type","onClick","CommentItem","name","email","body","CommentList","key","PostItem","title","username","PostList","Search","setSearchQuery","debouncedSetSearchQuery","f","delay","timerId","clearTimeout","args","setTimeout","debounce","value","placeholder","onChange","e","target","handleInputChange","App","useState","setPosts","isLoading","setIsLoading","isLoaded","setIsLoaded","hasError","setHasError","searchQuery","loadPosts","preparedPosts","searchedPosts","replace","includes","max","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6d3325c6.chunk.js","sourcesContent":["import { Post, User, Comment } from '../components/Interface';\n\nconst API_URL = 'https://seialek.github.io/react_dynamic-list-of-posts/api';\n\nconst getData = async (url: string) => {\n  const response = await fetch(url);\n  const json = await response.json();\n\n  return json;\n};\n\nexport const preparePosts = async () => {\n  const [posts, users, comments] = await Promise.all([\n    getData(`${API_URL}/posts.json`),\n    getData(`${API_URL}/users.json`),\n    getData(`${API_URL}/comments.json`),\n  ]);\n\n  return posts.map((post: Post) => ({\n    ...post,\n    user: users.find((user: User) => user.id === post.userId),\n    comments: comments.filter((comment: Comment) => comment.postId === post.id),\n  }));\n};\n","import React from 'react';\n\ninterface Props {\n  text: string;\n  className: string;\n  handleClick: () => void;\n}\n\nexport const Button: React.FC<Props> = ({\n  text,\n  className,\n  handleClick,\n}) => (\n  <button type=\"button\" className={className} onClick={handleClick}>\n    {text}\n  </button>\n);\n","import React from 'react';\n\ninterface Props {\n  id: number;\n  postId: number;\n  name: string;\n  email: string;\n  body: string;\n}\n\nexport const CommentItem: React.FC<Props> = ({\n  id,\n  postId,\n  name,\n  email,\n  body,\n}) => (\n  <div className=\"box is-italic is-margin-vertical\" id={`${postId}-${id}`}>\n    <strong>{name}</strong>\n    {' '}\n    <small>{email}</small>\n    <p>\n      {body}\n    </p>\n  </div>\n);\n","import React from 'react';\nimport { Comment } from '../Interface';\nimport { CommentItem } from './CommentItem';\n\ninterface Props {\n  comments: Comment[];\n}\n\nexport const CommentList: React.FC<Props> = ({ comments }) => (\n  <ul>\n    {comments.map((comment) => (\n      <li key={comment.id}>\n        <CommentItem {...comment} />\n      </li>\n    ))}\n  </ul>\n);\n","import React from 'react';\nimport { User, Comment } from '../Interface';\nimport { CommentList } from '../Comments';\n\ninterface Props {\n  id: number;\n  title: string;\n  body: string;\n  user: User;\n  comments: Comment[];\n}\n\nexport const PostItem: React.FC<Props> = ({\n  id,\n  title,\n  body,\n  user,\n  comments,\n}) => (\n  <article className=\"message is-primary\" id={`${id}`}>\n    <div className=\"message-header\">\n      <h1 className=\"title has-text-white is-capitalized is-4\">\n        {title}\n      </h1>\n    </div>\n    <div className=\"message-body\">\n      <h2 className=\"subtitle\">\n        {`Author: ${user.username}`}\n      </h2>\n      {body}\n      <CommentList comments={comments} />\n    </div>\n  </article>\n);\n","import React from 'react';\nimport { Post } from '../Interface';\nimport { PostItem } from './PostItem';\n\ninterface Props {\n  posts: Post[];\n}\n\nexport const PostList: React.FC<Props> = ({ posts }) => (\n  <div>\n    {posts.map((post) => (\n      <PostItem {...post} key={post.id} />\n    ))}\n  </div>\n);\n","import React from 'react';\nimport { debounce } from '../../helpers';\n\ntype Props = {\n  setSearchQuery: (query: string) => void;\n};\n\nexport const Search: React.FC<Props> = ({ setSearchQuery }) => {\n  const debouncedSetSearchQuery = debounce((value: string) => setSearchQuery(value), 1000);\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target;\n\n    debouncedSetSearchQuery(value);\n  };\n\n  return (\n    <div className=\"field\">\n      <div className=\"control\">\n        <input\n          className=\"input is-primary\"\n          type=\"text\"\n          placeholder=\"Input text\"\n          onChange={e => {\n            handleInputChange(e);\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n","export const debounce = (f, delay) => {\n  let timerId;\n\n  const debounced = (...args) => {\n    clearTimeout(timerId);\n    timerId = setTimeout(f, delay, ...args);\n  };\n\n  return debounced;\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { preparePosts } from './helpers';\nimport { Post } from './components/Interface';\nimport { Button } from './components/Button';\nimport { PostList } from './components/PostList';\nimport { Search } from './components/Search';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const loadPosts = async () => {\n    setIsLoading(true);\n    setHasError(false);\n\n    try {\n      const preparedPosts = await preparePosts();\n\n      setPosts(preparedPosts);\n      setIsLoaded(true);\n    } catch {\n      setHasError(true);\n    }\n\n    setIsLoading(false);\n  };\n\n  const searchPosts = () => {\n    if (!searchQuery) {\n      return posts;\n    }\n\n    return posts.filter((post: Post) => (`${post.title} ${post.body}`)\n      .replace(/\\s*/g, ' ')\n      .includes(searchQuery.replace(/\\s*/g, ' ')));\n  };\n\n  const searchedPosts = searchPosts();\n\n  return (\n    <section className=\"section\">\n      <div className=\"container\">\n        <h1 className=\"title is-1\">Dynamic List of Posts</h1>\n        {!isLoading && !isLoaded && !hasError && (\n          <Button\n            text=\"Load Posts\"\n            className=\"button\"\n            handleClick={loadPosts}\n          />\n        )}\n        {isLoading && (\n          <progress className=\"progress is-primary\" max=\"100\">\n            Loading...\n          </progress>\n        )}\n        {hasError && (\n          <>\n            <div className=\"notification is-warning\">Oops! Something went wrong... :(</div>\n            <Button\n              text=\"Try Again\"\n              className=\"button\"\n              handleClick={loadPosts}\n            />\n          </>\n        )}\n        {isLoaded && (\n          <>\n            <Search setSearchQuery={setSearchQuery} />\n            <PostList posts={searchedPosts} />\n          </>\n        )}\n        {isLoaded && !searchedPosts.length && (\n          <div className=\"notification is-warning\">Posts not found....</div>\n        )}\n      </div>\n    </section>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}